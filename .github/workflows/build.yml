name: Build APK

on:
  workflow_call:
    outputs:
      version:
        description: "The version extracted from build.gradle.kts"
        value: ${{ jobs.build.outputs.version }}
      apk_path:
        description: "Path to the built APK file"
        value: ${{ jobs.build.outputs.apk_path }}
      apk_name:
        description: "Name of the built APK file"
        value: ${{ jobs.build.outputs.apk_name }}

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.extract_version.outputs.version_name }}
      apk_path: ${{ steps.apk_paths.outputs.apk_path }}
      apk_name: ${{ steps.apk_paths.outputs.apk_name }}

    steps:
      # Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Cache Gradle
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            gradle-${{ runner.os }}-

      # Set up Java (required for Gradle)
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '17'

      # Extract version from build.gradle.kts
      - name: Extract version
        id: extract_version
        run: |
          VERSION_NAME=$(grep -oP 'versionName\s*=\s*"\K[0-9.]+' app/build.gradle.kts)
          echo "version_name=$VERSION_NAME" >> $GITHUB_OUTPUT

      # Add permission step before running Gradle
      - name: Grant execute permission for Gradlew
        run: chmod +x ./gradlew

      # Ensure the directory exists
      - name: Create directory for JKS
        run: mkdir -p app/jvb

      # Decode the JKS file
      - name: Decode JKS file
        run: |
          echo "${{ secrets.JKS_BASE64 }}" | base64 -d > app/jvb/dainsleif.jks

      # Build the app
      - name: Build APK
        run: ./gradlew assembleRelease

      # Determine APK path and name
      - name: Set APK file paths
        id: apk_paths
        run: |
          if [ -f "app/build/outputs/apk/release/app-release.apk" ]; then
            echo "apk_path=app/build/outputs/apk/release/app-release.apk" >> $GITHUB_OUTPUT
            echo "apk_name=app-release-v${{ steps.extract_version.outputs.version_name }}.apk" >> $GITHUB_OUTPUT
          else
            echo "apk_path=app/build/outputs/apk/release/app-release-unsigned.apk" >> $GITHUB_OUTPUT
            echo "apk_name=app-release-unsigned-v${{ steps.extract_version.outputs.version_name }}.apk" >> $GITHUB_OUTPUT
          fi

      # Upload the APK as an artifact to share with other jobs
      - name: Upload APK as artifact
        uses: actions/upload-artifact@v3
        with:
          name: app-release
          path: ${{ steps.apk_paths.outputs.apk_path }}
          retention-days: 1 